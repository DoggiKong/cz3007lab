package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RCURLY = 9;
		static public final short RPAREN = 10;
		static public final short INT = 11;
		static public final short RBRACKET = 12;
		static public final short BOOLEAN = 13;
		static public final short VOID = 14;
		static public final short LCURLY = 15;
		static public final short SEMICOLON = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short PUBLIC = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short COMMA = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLcbOb5KKVhyPG0T4C3SmoSZOH10YDab4zYNIhAnSA$Uit30tJCKAj98M$lMh7$reGri" +
		"qqspVfRAiD2kjhAmqjA9KiaxlT#So33Fp3SpJuuzcdlUUSyzvpxdhT#y5R4sOWZoKeGALgC" +
		"OLk1RvM8HSZCQ5M8Ab68ne3C7v68eON81Xw8iGz4Oe#c1Wm94E7HaLS6IOZhoucyWH7f7#s" +
		"Ia1iI$nOD#EgRWH9QZ2vPY16#GWRAYLnx0MAp5SVa0yKf61J1#y3QY5tSb3a1$U$UG5Qru$" +
		"AnuseXVR5TtkMKlUVFcBl7QTBzAIrn$psEu0pHlauddFpjLgTgpiVH7kN3KvWubabNTX5SW" +
		"NQCIa0B8cAdk4MelhS3qcOveFLff5TBQ5VOo5$IOB#so$zl4USrdSPTHPNlvOQVQogR5vs#" +
		"LNBCULME75xwu#lrl6ECnYvekuxcFbDzJ8IQn276x60jo2Mt4R5dgiNc70VUYkNjebVptkC" +
		"bUP#qPhIE3EFMFkIFcUUxDHxSqad4V$IDRgS2UzoTY4EkKVfPWdi0RfQ9HMhEFSDU0oNCgH" +
		"vg084t0Lhg6SYUaS#HpCbT#nZDR5M8qxi5wEucxSmvc#3$VY0Nw53s4p7kHtaC0zcCGp9fc" +
		"jfl2h6CNTbivp8OEPCxcwsSnkxe8yjZM6Us8i2jXYuVyWyboo3PwBTfvpmRmvUl54SF3q3E" +
		"EwX$E4YE3vq8$hs9$dZJSlYZn3yoByy0QJLwvvTajU99bXWEOvB7b1YkVGFCEI5yhx88mCp" +
		"tnMisDbxrmr1yyBRvQ3Dwqlk$#iphLmtbU1Hvzhk#TSTkL5UlaDphQdpJcsFZwuPjtARbqF" +
		"wfPHgkgHNFSgvJFXuEiWbcVdSBvDuhp66sWVkgjtpM$eLNQuDBjhvuPI6wYr4lg7iLP1pS4" +
		"pDeQQwRShlzb6ABqT8nh44POIPJmXG$aDbgcNbuqeejyi8rcQVtDDJ4imOmn#XUNqHF8BQr" +
		"e7zQidTX9RYUs0aKXvW3W2s8ef3r5MKHwdd4pPIbbEsKxifLvD#GznbdYOyI4wxnRg6QPk1" +
		"Vft4ssQ$pfpsPowRJpj#oadicBA0iqvflrpw3zCEOiLqRRPEkUZkZwtQrkswVGTrHoEnJX9" +
		"XJ1E4mNqHsjUhBy#k#Nh6CCswekqRIQHfEtDFiRxClrBFFAa4qkrdalK46jws8TbMgudGeZ" +
		"bkfrzn1xjwqsiqle2OhNM5nArJXsFK9z6h2KsQlzYOftMDn4hY0QYpgtzpSG6OcMd3LFSz7" +
		"eHETXHftvAsmTeUKBtDyujPvGRtoksf#XeexFkR8C$Sxw7QBtSpP#ZRJCyuegjsp0cQBcB2" +
		"6VUDEVUCjVKQD3Z6Tgp$jgoTFkj7kDer$vC7#r7#x1DTTFdwTZydlJ1Jz$6CLTDW34n$w6z" +
		"2Zts9kYV$2rjIhPrmlCdfrNvdHoHR#KR#LeEoo5b#KgLNxfu##LpbWTSzS#8JubFY7toaUo" +
		"L7TG#b3qitoDuCWc$NDafByWEULwsopPvJfwLPwH5Fb0PdfOjqYnRvJNPBI$ABdb9MP#I9#" +
		"K9fJskoXPvNrwLL#HTUKVUbhVaJNc3rezrBtwI5fO$A$sOAdzHvN5NFtzKvIbN$K$vGy#DU" +
		"VvEucijXATx4CpJEPy7L2V0juk3hvSWlbz2#9On2F0sCbp8S8DvGtcYWdbAACrRgeIncPHM" +
		"o28lcoXaJ26vEMopadebzLpUGwEfvodO#VAqyRLXAAIndi1w4VjP1AWNI3fjvZtk2wdqfLA" +
		"MQgImRjxcPMw8PxvuoaG$I69xnOmjfcxUU2Ee9rCtCP9wzRyqS7bx");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Import Declaration RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [1] Import = IMPORT ID SEMICOLON Import; returns 'Import' although none is marked
			Action.NONE,  	// [2] Import = 
			RETURN2,	// [3] Declaration = Function_Declaration Declaration; returns 'Declaration' although none is marked
			RETURN2,	// [4] Declaration = Field_Declaration Declaration; returns 'Declaration' although none is marked
			RETURN2,	// [5] Declaration = Type_Declaration Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [6] Declaration = 
			RETURN9,	// [7] Function_Declaration = Accessibility Type_Name ID LPAREN Parameter_List RPAREN LCURLY Statement_List RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [8] Field_Declaration = Accessibility Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [9] Type_Declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [10] Accessibility = PUBLIC
			Action.NONE,  	// [11] Accessibility = 
			Action.RETURN,	// [12] Type_Name = Primitive_Type
			Action.RETURN,	// [13] Type_Name = Array_Type
			Action.RETURN,	// [14] Type_Name = ID
			Action.RETURN,	// [15] Primitive_Type = VOID
			Action.RETURN,	// [16] Primitive_Type = INT
			Action.RETURN,	// [17] Primitive_Type = BOOLEAN
			RETURN3,	// [18] Array_Type = INT LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [19] Array_Type = BOOLEAN LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [20] Array_Type = VOID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] Array_Type = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] Array_Type = Array_Type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] Parameter = Type_Name ID; returns 'ID' although none is marked
			RETURN3,	// [24] Parameter_List = Parameter COMMA Parameter_List; returns 'Parameter_List' although none is marked
			Action.RETURN,	// [25] Parameter_List = Parameter
			Action.NONE,  	// [26] Parameter_List = 
			Action.RETURN,	// [27] Statement = Local_Variable
			Action.RETURN,	// [28] Statement = Block_Statement
			Action.RETURN,	// [29] Statement = If_Statement
			Action.RETURN,	// [30] Statement = While_Statement
			Action.RETURN,	// [31] Statement = Break_Statement
			Action.RETURN,	// [32] Statement = Return_Statement
			Action.RETURN,	// [33] Statement = Expression_Statement
			RETURN3,	// [34] Local_Variable = Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [35] Block_Statement = LCURLY Statement_List RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [36] Statement_List = Statement Statement_List; returns 'Statement_List' although none is marked
			Action.NONE,  	// [37] Statement_List = 
			RETURN6,	// [38] If_Statement = IF LPAREN Expression RPAREN Statement Else_Optional; returns 'Else_Optional' although none is marked
			RETURN2,	// [39] Else_Optional = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [40] Else_Optional = 
			RETURN5,	// [41] While_Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [42] Break_Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] Return_Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [44] Return_Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [45] Expression_Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [46] Expression = Assignment
			Action.RETURN,	// [47] Expression = RHS_Expression
			RETURN3,	// [48] Assignment = LHS_Expression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [49] LHS_Expression = ID Array_Access; returns 'Array_Access' although none is marked
			RETURN4,	// [50] Array_Access = LBRACKET Expression RBRACKET Array_Access; returns 'Array_Access' although none is marked
			Action.NONE,  	// [51] Array_Access = 
			Action.RETURN,	// [52] RHS_Expression = Arithmetic_Expression
			RETURN3,	// [53] RHS_Expression = Arithmetic_Expression Comparison_Operator Arithmetic_Expression; returns 'Arithmetic_Expression' although none is marked
			Action.RETURN,	// [54] Comparison_Operator = EQEQ
			Action.RETURN,	// [55] Comparison_Operator = NEQ
			Action.RETURN,	// [56] Comparison_Operator = LT
			Action.RETURN,	// [57] Comparison_Operator = LEQ
			Action.RETURN,	// [58] Comparison_Operator = GT
			Action.RETURN,	// [59] Comparison_Operator = GEQ
			new Action() {	// [60] Arithmetic_Expression = Arithmetic_Expression Additive_Operator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [61] Arithmetic_Expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [62] Additive_Operator = PLUS
			Action.RETURN,	// [63] Additive_Operator = MINUS
			new Action() {	// [64] Term = Term Multiplicative_Operator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [65] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [66] Multiplicative_Operator = TIMES
			Action.RETURN,	// [67] Multiplicative_Operator = DIV
			Action.RETURN,	// [68] Multiplicative_Operator = MOD
			RETURN2,	// [69] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [70] Factor = Primary_Expression
			Action.RETURN,	// [71] Primary_Expression = LHS_Expression
			Action.RETURN,	// [72] Primary_Expression = Function_Call
			Action.RETURN,	// [73] Primary_Expression = Array_Expression
			Action.RETURN,	// [74] Primary_Expression = STRING_LITERAL
			Action.RETURN,	// [75] Primary_Expression = INT_LITERAL
			Action.RETURN,	// [76] Primary_Expression = Boolean_Literal
			Action.RETURN,	// [77] Primary_Expression = Paren_Expression
			RETURN4,	// [78] Function_Call = ID LPAREN Expression_List RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [79] Expression_List = Expression COMMA Expression_List; returns 'Expression_List' although none is marked
			Action.RETURN,	// [80] Expression_List = Expression
			Action.NONE,  	// [81] Expression_List = 
			RETURN3,	// [82] Array_Expression = LBRACKET Expression_List RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [83] Boolean_Literal = TRUE
			Action.RETURN,	// [84] Boolean_Literal = FALSE
			RETURN3	// [85] Paren_Expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
