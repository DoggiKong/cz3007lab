package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RCURLY = 9;
		static public final short RBRACKET = 10;
		static public final short SEMICOLON = 11;
		static public final short RPAREN = 12;
		static public final short LCURLY = 13;
		static public final short INT = 14;
		static public final short BOOLEAN = 15;
		static public final short VOID = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short PUBLIC = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PLUS = 24;
		static public final short TIMES = 25;
		static public final short DIV = 26;
		static public final short MOD = 27;
		static public final short TYPE = 28;
		static public final short MODULE = 29;
		static public final short ELSE = 30;
		static public final short EQEQ = 31;
		static public final short NEQ = 32;
		static public final short LT = 33;
		static public final short LEQ = 34;
		static public final short GT = 35;
		static public final short GEQ = 36;
		static public final short COMMA = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLbbKLLKO$iwzICAze1aW5WwWWcX8Y9ZC90AXQUOyfgOeAiwIPfbML1PQkNfijNfmzT1" +
		"3avGssKIbbMM3MMebDW#cPLXHrjztzjt0uTnxkFUsMglLEUlR$$JjVmzddxqtuAh79EHYFC" +
		"em6LCm7JDm9Ggm2fTY9FfW3TOY7ZsHY5wu41SX2Rs3ybF2v0yAapyaJFubDlwrc8bhK8gfc" +
		"8Pvc2zDk5dnad43DkCw3C35o49s05uFEGPNC1wwgMo3W$8cu2fCH4M8l3m$Ng1npr7ZTep8" +
		"JrYFAimYezp6AC9OHkQ6cJLLPJs3TV8m5WLa37Mic#COoNUCNEuOkS8niY18dJ6s#Lu2DuR" +
		"xpL297wzQTjbzyYCs8iBVZoxOuESBPYy9ojYEyt4UgX6BI7H5DBou3Kkn33LOZXLOwSSVPH" +
		"kJFJuwI3nSEnPHkb#nyBHfCLghGx6SGvs8$852QK5tQM4vaF2jSr#vJNx7Dhvnr4vZ4swNK" +
		"zZ2TNmhBa1V920DwUY73FH79een39TX1F#fIeoZDXjNoyzOYCMu1QjHY#jn8sx2Ljo93V8D" +
		"xa0zxi8zk1l#ptQkx3JkJEdyZuVmVylWEixaJfB55hAvEdBOYhbsSlbVvdCb5Vxl#GPtDZS" +
		"Yk58ZkQQwyilvU37yOjtGdIkj1sSyBW2lWkWTbEVBrYSepxTFkqBa9VZndCVj7F7bBWt8S8" +
		"w4adNCFwpxtqViynr1ZoS0tyvBvBzjzndgUthz$EKEtCxiYA2CdhIYs8yYxWSbt0L6iTzzk" +
		"KSaysRIdwUddMyVKxZnSEtsVWNI3Ex2KIp1ib9fKNpD4VdMkQ#CfntFDuOmyoUfqeHNrV3o" +
		"fFIeMbxcyt1Fzp0MpRUC64YELp4zoXUjlaCNjIidq6VmotZ4x#7C0Zks#7R8ZO2nbRYFU0r" +
		"mvL4UfYmX2eWSef0OIHGJ5KG#KKhUCSeYOW9HpbphAQUOUJi3ERE9gRhzUkepjNyqSpPGJg" +
		"BnWBbxQqw3Zizb$5dAwJJsQTyidpGsQtjEnxQmbx56pTbF723gY4DqxAGygMFdBFrRJ7Y9U" +
		"JhceXv7pBVatHDidErSurxMNQ1pLn99jlaOG2pKtFkfLuMMrrMjvGhMwqUvLFVjBEs7TBu7" +
		"wL#cUPE96grF8vPhVJMnafX1hD8#yrik8jOHQonjRY9gYRMMkJXY6MiDiTDYdzQoMSiMNQV" +
		"MKdzygyx5UJIKiLl1EcSwpWjEQHdDVYPgFSKI5otpEjOpl4vjCDQhjVyik7PSoTIhA5Ce3#" +
		"hOSLkTL9kTtT5sfOKwHZwxRNQZBNU99NOYrBoTjscC#pVoEETtvUh#xe1#v4zfLhAv7VP7V" +
		"fElvIlvKhwGp#KpEQ5ynrNvgMOq4Pz8atpSQijHbaU8ZuWFvGCv9Dn7v7rvc#LR17S#UPdO" +
		"Ay#P4Me7vJqbtv5tvLLvKLwGv#KbUKQUbgTaZ#oM9rNqSMANDCXZygYo7r7b4$AADCe1ULF" +
		"UaDTbl#oZxx3koxTcNlbEwT#hyWTLdcmRtwzjsYzoLi$ANnGJUGk9v8uU0NElBUOvq0xmr8" +
		"dYkHF1aoUIfv11W7Sremt3BSZXYM971VECOCmPu4tJpRkccxVDI9vBBeB$4C#RVEe52cxUG" +
		"5syUHWAMRJJA4qCOjzCc3UIOVHNKWP29cEPwlJqOIXjytPIPa4gsqYbJEy4WzbMgRhpWUUz" +
		"coU#eP11VUpVmJTou0==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Import Declaration RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [1] Import = IMPORT ID SEMICOLON Import; returns 'Import' although none is marked
			Action.NONE,  	// [2] Import = 
			RETURN2,	// [3] Declaration = Function_Declaration Declaration; returns 'Declaration' although none is marked
			RETURN2,	// [4] Declaration = Field_Declaration Declaration; returns 'Declaration' although none is marked
			RETURN2,	// [5] Declaration = Type_Declaration Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [6] Declaration = 
			RETURN9,	// [7] Function_Declaration = Accessibility Type_Name ID LPAREN Parameter RPAREN LCURLY Statement RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [8] Field_Declaration = Accessibility Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [9] Type_Declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [10] Accessibility = PUBLIC
			Action.NONE,  	// [11] Accessibility = 
			Action.RETURN,	// [12] Type_Name = Primitive_Type
			Action.RETURN,	// [13] Type_Name = Array_Type
			Action.RETURN,	// [14] Type_Name = ID
			Action.RETURN,	// [15] Primitive_Type = VOID
			Action.RETURN,	// [16] Primitive_Type = INT
			Action.RETURN,	// [17] Primitive_Type = BOOLEAN
			RETURN3,	// [18] Array_Type = INT LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [19] Array_Type = BOOLEAN LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [20] Array_Type = VOID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] Array_Type = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] Array_Type = Array_Type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] Parameter = Type_Name ID; returns 'ID' although none is marked
			Action.RETURN,	// [24] Statement = Local_Variable
			Action.RETURN,	// [25] Statement = Block_Statement
			Action.RETURN,	// [26] Statement = If_Statement
			Action.RETURN,	// [27] Statement = While_Statement
			Action.RETURN,	// [28] Statement = Break_Statement
			Action.RETURN,	// [29] Statement = Return_Statement
			Action.RETURN,	// [30] Statement = Expression_Statement
			Action.NONE,  	// [31] Statement = 
			RETURN3,	// [32] Local_Variable = Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [33] Block_Statement = LCURLY Statement RCURLY; returns 'RCURLY' although none is marked
			RETURN6,	// [34] If_Statement = IF LPAREN Expression RPAREN Statement Else_Optional; returns 'Else_Optional' although none is marked
			RETURN2,	// [35] Else_Optional = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [36] Else_Optional = 
			RETURN5,	// [37] While_Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [38] Break_Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [39] Return_Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [40] Return_Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [41] Expression_Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [42] Expression = Assignment
			Action.RETURN,	// [43] Expression = RHS_Expression
			RETURN3,	// [44] Assignment = LHS_Expression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [45] LHS_Expression = ID
			Action.RETURN,	// [46] LHS_Expression = Array_Access
			RETURN4,	// [47] Array_Access = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [48] Array_Access = LHS_Expression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [49] RHS_Expression = Arithmetic_Expression
			RETURN3,	// [50] RHS_Expression = Arithmetic_Expression Comparison_Operator Arithmetic_Expression; returns 'Arithmetic_Expression' although none is marked
			Action.RETURN,	// [51] Comparison_Operator = EQEQ
			Action.RETURN,	// [52] Comparison_Operator = NEQ
			Action.RETURN,	// [53] Comparison_Operator = LT
			Action.RETURN,	// [54] Comparison_Operator = LEQ
			Action.RETURN,	// [55] Comparison_Operator = GT
			Action.RETURN,	// [56] Comparison_Operator = GEQ
			new Action() {	// [57] Arithmetic_Expression = Arithmetic_Expression Additive_Operator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [58] Arithmetic_Expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [59] Additive_Operator = PLUS
			Action.RETURN,	// [60] Additive_Operator = MINUS
			new Action() {	// [61] Term = Term Multiplicative_Operator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [62] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [63] Multiplicative_Operator = TIMES
			Action.RETURN,	// [64] Multiplicative_Operator = DIV
			Action.RETURN,	// [65] Multiplicative_Operator = MOD
			RETURN2,	// [66] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [67] Factor = Primary_Expression
			Action.RETURN,	// [68] Primary_Expression = LHS_Expression
			Action.RETURN,	// [69] Primary_Expression = Function_Call
			Action.RETURN,	// [70] Primary_Expression = Array_Expression
			Action.RETURN,	// [71] Primary_Expression = STRING_LITERAL
			Action.RETURN,	// [72] Primary_Expression = INT_LITERAL
			Action.RETURN,	// [73] Primary_Expression = Boolean_Literal
			Action.RETURN,	// [74] Primary_Expression = Paren_Expression
			RETURN4,	// [75] Function_Call = ID LPAREN Expression_List RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [76] Expression_List = Expression COMMA Expression_List; returns 'Expression_List' although none is marked
			Action.NONE,  	// [77] Expression_List = 
			RETURN3,	// [78] Array_Expression = LBRACKET Expression_List RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [79] Boolean_Literal = TRUE
			Action.RETURN,	// [80] Boolean_Literal = FALSE
			RETURN3	// [81] Paren_Expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
