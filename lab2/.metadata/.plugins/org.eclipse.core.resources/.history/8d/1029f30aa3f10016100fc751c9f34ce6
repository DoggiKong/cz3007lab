// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Import Declaration RCURLY;


/* Import */
Import = IMPORT ID SEMICOLON Import
	|
	;

/* Declaration */
Declaration = Function_Declaration Declaration
	| Field_Declaration Declaration
	| Type_Declaration Declaration
	|
	;

Function_Declaration = Accessibility Type_Name ID LPAREN Parameter RPAREN LCURLY Statements RCURLY;

Field_Declaration = ; /* NOT DONE */

Type_Declaration = ; /* NOT DONE */
	
/* Types */
Type_Name = Primitive_Type
	| Array_Type
	| ID
	;

Primitive_Type = VOID
	| INT
	| BOOLEAN
	;

Array_Type = LBRACKET RBRACKET; /* NEED TO FIX LALR CONFLICT -> PLZ ENLIGHTEN ON HOW TO DO */



/* Parameter List */
Parameter = ; /* NOT DONE */

/* Statements */
Statement = Local_Variable
	| Block_Statement
	| If_Statement /* NOT DONE */
	| While_Statement /* NOT DONE */
	| Break_Statement /* NOT DONE */
	| Return_Statement /* NOT DONE */
	| Expression_Statement /* NOT DONE */
	|
	;

Local_Variable = Type_Name ID SEMICOLON;

Block_Statement = LCURLY Statement RCURLY; /* NOT DONE -> NEED TO WORK OUT HOW TO GET "LIST OF STATEMENTS" SINCE IF_STATEMENT ONLY HAS 1 STATEMENT */

If_Statement = IF LPAREN Expression RPAREN Statement Else_Optional /* NOT DONE */
	;   

Else_Optional = ELSE Statement
	|
	; 

While_Statement = ;

Break_Statement = ;

Return_Statement = ;

Expression_Statement = ;


/* Expression */ 
Expression = ;/* NOT DONE */




	
/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;