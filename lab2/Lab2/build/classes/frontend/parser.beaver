// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

/*
 * A module consists of the keyword module, followed by an identifier, followed by an
 * opening curly brace, followed by imports, followed by declarations, followed by a closing curly brace.
 */
Module = MODULE ID LCURLY Import Declaration RCURLY;


/*
 * A module imports (nonterminal Imports) consist of zero or more import statements. An import statement
 * (nonterminal Import) consists of the keyword import, followed by an identifier, followed by a semicolon.
 */
Import = IMPORT ID SEMICOLON Import
	|
	;

/* 
 * A module declarations (nonterminal Declarations) consist of zero or more declarations. A declaration is
 * either a function declaration, or a field declaration, or a type declaration.
 */
Declaration = Function_Declaration Declaration
	| Field_Declaration Declaration
	| Type_Declaration Declaration
	|
	;

/*
 * A function declaration consists of an accessibility specifier, a type name, an identifier, an opening
 * parenthesis, a parameter list, a closing parenthesis, an opening curly brace, a possibly empty list of statements,
 * and a closing curly brace.
 */
Function_Declaration = Accessibility Type_Name ID LPAREN Parameter_List RPAREN LCURLY Statement RCURLY;

/*
 * A field declaration consists of an accessibility specifier, a type name, an identifier, and a semicolon.
 */
Field_Declaration = Accessibility Type_Name ID SEMICOLON;

/*
 * A type declaration consists of an accessibility specifier, the keyword type, an identifier, a single equals
 * symbol, a string literal, and a semicolon.
 */
Type_Declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;
	
/*
 * An accessibility specifier consists of either the keyword public, or of nothing at all.
 */ 
Accessibility = PUBLIC
		  |
		  ;

/* 
 * A type name is either a primitive type, an array type, or an identifier.
 */
Type_Name = Primitive_Type
	| Array_Type
	| ID
	;

/*
 * A primitive type is one of the keywords void, boolean and int.
 */
Primitive_Type = VOID
	| INT
	| BOOLEAN
	;

/*
 * An array type is a type name, followed by a left bracket, followed by a right bracket. (Hint: In order to
 * avoid LALR conflicts, you will need to expand the definition of the array type nonterminal as discussed in the
 * tutorial.)
 */
Array_Type = INT LBRACKET RBRACKET
	| BOOLEAN LBRACKET RBRACKET
	| VOID LBRACKET RBRACKET
	| ID LBRACKET RBRACKET
	| Array_Type LBRACKET RBRACKET
	;



/* A parameter list is a possibly empty list of parameters separated by commas. A parameter is a type name
 * followed by an identifier.
 */ 
Parameter = Type_Name ID;

Parameter_List = Parameter COMMA Parameter_List
    | Parameter
    ;

/* Statements */
Statement = Local_Variable
	| Block_Statement
	| If_Statement
	| While_Statement
	| Break_Statement
	| Return_Statement
	| Expression_Statement
	;

/*
 * a local variable declaration, which consists of a type name, followed by an identifier, followed by a
 * semicolon;
 */
Local_Variable = Type_Name ID SEMICOLON;

/*
 * a block of statements, which consists of an opening curly brace, followed by a possibly empty list of
 * statements, followed by a closing curly brace;
 */
Block_Statement = LCURLY Statement_List RCURLY;

Statement_List = Statement Statement_List
    |
    ;

/*
 * an if statement, which consists of an if keyword, an opening parenthesis, an expression, a closing
 * parenthesis, a statement, an else keyword, and another statement; optionally, the else keyword and the
 * last statement may be missing (Note: as discussed, this will lead to a shift-reduce conflict, which is
 * correctly resolved by favouring shift over reduce.);
 */
If_Statement = IF LPAREN Expression RPAREN Statement Else_Optional
	;   

Else_Optional = ELSE Statement
	|
	; 

/*
 * a while statement, which consists of a while keyword, an opening parenthesis, an expression, a closing
 * parenthesis, and a statement;
 */
While_Statement = WHILE LPAREN Expression RPAREN Statement;

/*
 * a break statement, which consists of a break keyword followed by a semicolon;
 */
Break_Statement = BREAK SEMICOLON;
 
/*
 * a return statement, which consists of a return keyword, followed by an optional expression, followed
 * by a semicolon;
 */
Return_Statement = RETURN SEMICOLON
	| RETURN Expression SEMICOLON
	;

/*
 * an expression statement, which consists of an expression followed by a semicolon.
 */
Expression_Statement = Expression SEMICOLON;


/* 
 * An expression is either an assignment or a right hand side expression.
 */ 
Expression = Assignment
        | RHS_Expression
        ;
/*
 * An assignment is a left hand side expression, followed by a single equals sign, followed by an expression.
 */ 
Assignment = LHS_Expression EQL Expression; /* PLEASE CHECK IF EQL IS THE SAME AS EQUAL */

/*
 * A left hand side expression is either an identifier or an array access. 
 */
LHS_Expression = ID
        | Array_Access
        ;

/*
 * An array access is a left hand side
 * expression, followed by an opening bracket, followed by an expression, followed by a closing bracket.
 */
Array_Access = LHS_Expression LBRACKET Expression RBRACKET;

/*
 * A right hand side expression is an arithmetic expression, optionally followed by a comparison operator and
 * another arithmetic expression. A comparison operator is one of EQEQ, NEQ, LT, LEQ, GT, GEQ.
 */
RHS_Expression = Arithmetic_Expression
		| Arithmetic_Expression Comparison_Operator Arithmetic_Expression;

Comparison_Operator = EQEQ
        | NEQ
        | LT
        | LEQ
        | GT
        | GEQ
        ;


/*
 * An arithmetic expression is either an arithmetic expression, followed by an additive operator, followed by a
 * term; or just a term. An additive operator is either PLUS or MINUS.
 */
Arithmetic_Expression = Arithmetic_Expression Additive_Operator Term
        | Term
        ;

Additive_Operator = PLUS
        | MINUS
        ;

/*
 * A term is either a term, followed by a multiplicative operator, followed by a factor; or just a factor. A
 * multiplicative operator is one of TIMES, DIV, MOD.
 */
Term = Term Multiplicative_Operator Factor
        | Factor
        ;

Multiplicative_Operator = TIMES
        | DIV
        | MOD
        ;

/*
 * A factor is either a MINUS followed by a factor, or a primary expression.
 */
Factor = MINUS Factor
        | Primary_Expression
        ;

/*
 * A primary expression is one of the following:
 *  - a left hand side expression;
 *  - a function call: an identifier, followed by an opening parenthesis, followed by a possibly empty list of
 * expressions separated by comma, followed by a closing parenthesis;
 *  - an array expression: an opening bracket, followed by a non-empty list of expressions separated by
 * comma, followed by a closing bracket;
 *  - a string literal;
 *  - an integer literal;
 *  - one of the Boolean literals TRUE and FALSE;
 *  - a parenthesised expression: an opening parenthesis, followed by an expression, followed by a closing
 * parenthesis.
 */
Primary_Expression = LHS_Expression
        | Function_Call
        | Array_Expression
        | STRING_LITERAL
        | INT_LITERAL
        | Boolean_Literal
        | Paren_Expression
        ;

Function_Call = ID LPAREN Expression_List RPAREN;

Expression_List = Expression COMMA Expression_List
        | Expression
        |
        ;

Array_Expression = LBRACKET Expression_List RBRACKET;

Boolean_Literal = TRUE
        | FALSE
		;
		
Paren_Expression = LPAREN Expression RPAREN;